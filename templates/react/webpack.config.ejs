const dotenv = require('dotenv');
const { withModuleFederation } = require('@module-federation/enhanced/webpack');
const HtmlWebpackPlugin = require('html-webpack-plugin');
<% if (type === 'shell' || addSharedRemote) { %>
const remotes = require('./remotes.config');
<% } %>
dotenv.config({ path: '.env.development' });

module.exports = withModuleFederation({
    name: '<%= name %>',
    filename: 'remoteEntry.js',
<% if (type === 'microfrontend') { -%>
    exposes: {
        './App': '<%= exposesPath %>'
    },
<% } -%>
<% if (type === 'shell' || addSharedRemote) { -%>
    remotes,
<% } -%>
    shared: {
        react: { singleton: true, requiredVersion: false },
        'react-dom': { singleton: true, requiredVersion: false },
    },
    webpackConfig: {
        entry: './src/index.tsx',
        mode: 'development',
        devtool: 'source-map',
        devServer: {
            port: 3000,
            historyApiFallback: true,
            hot: true,
            open: true,
        },
        output: {
            publicPath: 'auto',
        },
        resolve: {
            extensions: ['.ts', '.tsx', '.js', '.jsx'],
        },
        module: {
            rules: [
                {
                    test: /\.tsx?$/,
                    use: 'ts-loader',
                    exclude: /node_modules/,
                },
                {
                    test: /\.css$/,
                    use: [
                        'style-loader',
                        'css-loader',
                        <% if (styleFramework === 'tailwind') { %>'postcss-loader',<% } %>
                    ]
                },
                <% if (useSass) { -%>
                {
                    test: /\.s[ac]ss$/,
                    use: ['style-loader', 'css-loader', 'sass-loader'],
                },
                <% } -%>
            ],
        },
        plugins: [
            new HtmlWebpackPlugin({
                template: './index.html',
                filename: 'index.html',
            }),
        ],
    }
});