#!/usr/bin/env node

import { Command } from 'commander';
import { intro, outro, text, isCancel, cancel, select, spinner } from '@clack/prompts';
import chalk from 'chalk';
import fs from 'node:fs';
import path from 'node:path';

import packageJson from '../package.json' assert { type: 'json' };
import { createMicrofrontend } from '../src/commands/create-mf';
import { createProject } from '../src/commands/create-project';
import { getConfig } from '../src/core/config';

type ProjectType = 'shell' | 'microfrontend';

const program = new Command();

function checkCancel(value: unknown) {
    if (isCancel(value)) {
        cancel('Operation cancelled.');
        process.exit(0);
    }
}

program.name('mf-cli').description('CLI for scalable microfrontend architecture').version(packageJson.version);

program
    .command('create')
    .description('Create a shell or microfrontend')
    .action(async () => {
        intro(chalk.cyan('MF Project Generator'));

        // üëâ –¢–∏–ø –ø—Ä–æ—î–∫—Ç—É
        const projectType = (await select({
            message: 'What do you want to create?',
            options: [
                { value: 'shell', label: 'Shell (host application)' },
                { value: 'microfrontend', label: 'Microfrontend (remote)' },
            ],
        })) as ProjectType;

        checkCancel(projectType);

        if (projectType === 'shell') {
            const config = getConfig(); // –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î mf-cli.config.json –∞–±–æ –¥–µ—Ñ–æ–ª—Ç–∏
            const appsDir = path.resolve(process.cwd(), config.appsDir ?? 'apps');
            const shellPath = path.join(appsDir, config.defaultShell ?? 'shell');

            // üîí –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞: shell –≤–∂–µ —ñ—Å–Ω—É—î
            if (fs.existsSync(shellPath)) {
                cancel(`Shell '${config.defaultShell}' already exists in '${appsDir}'. Only one shell is allowed.`);
                process.exit(1);
            }

            const name = (await text({
                message: 'Shell name:',
                placeholder: config.defaultShell ?? 'shell',
            })) as string;
            checkCancel(name);

            const s = spinner();
            s.start('Creating shell application...');
            await createProject(name as string);
            s.stop('Shell created.');

            outro(`‚úîÔ∏è Shell '${name}' created in '${config.appsDir}/${name}'`);
        }

        if (projectType === 'microfrontend') {
            // –î–µ–ª–µ–≥—É—î–º–æ –Ω–∞ create-mf –∑ —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—é –ª–æ–≥—ñ–∫–æ—é
            await createMicrofrontend(); // –í—Å—è –ª–æ–≥—ñ–∫–∞ –æ–ø–∏—Ç—É–≤–∞–Ω—å —Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Ç–∞–º
        }
    });

program.parse();
